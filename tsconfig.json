{
  "compilerOptions": {
    // 目标代码(ts -> js(es5/6/7))
    "target": "esnext",
    // 目标代码需要使用的模块化方案(commonjs require/module.exports/es module import/export)
    "module": "esnext",
    // 严格的检查(any)
    "strict": true,
    // 对jsx进行怎么样的处理
    "jsx": "preserve",
    // 辅助的导入功能
    "importHelpers": true,
    // 按照node的方式去解析模块 import
    "moduleResolution": "node",
    // 跳过对一些库的类型检测(axios -> 类型) lodash -> @types/lodash / 其他的第三方
    "skipLibCheck": true,
    // export default/module.exports = {}
    // es module 和 commonjs  以下两项表示是否可以混合使用
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    // 要不要生成映射文件(ts -> js)
    "sourceMap": true,
    // 文件路径在解析时，基本url
    "baseUrl": ".",
    // 指定具体要解析使用的类型
    "types": [
      "webpack-env"
    ],
    // 路径解析
    "paths": {
      "@/*": [
        "src/*"
      ],
      "components": [
        "src/components/*"
      ],
      "views": [
        "src/views/*"
      ]
    },
    // 可以指定在项目中可以使用库的类型
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  },
  // 当前有哪些代码需要通过解析的
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],
  // 排除掉
  "exclude": [
    "node_modules"
  ]
}
